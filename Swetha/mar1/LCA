class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        //LCA for a BST would be the node that is lowest and p->val < root->val < q->val
        if (root == NULL) return NULL;
        
        if ((p->val > root->val) && (q->val > root->val))
        {
            //return root; - why does this ordering make a diff?! 
            return lowestCommonAncestor(root->right, p, q);
        } else if ((p->val < root->val) && (q->val < root->val))
        {
            return lowestCommonAncestor(root->left, p, q);
        } 
            return root;
    }
};
